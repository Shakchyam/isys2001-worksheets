{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shakchyam/isys2001-worksheets/blob/main/Copy_of_resource_flucuations%20assignment%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">*The outline below is provided below is designed to guide you effectively through the simulation, analysis, and evaluation processes. Feel free to adapt this suggested structure by adding or removing sections to best communicate your findings.*\n",
        "\n",
        "## Title, Author, Introduction\n",
        "\n",
        "This notebook serves as an interactive report to simulate and analyze the fluctuations in resource prices. It aims to provide a deeper understanding of market dynamics, the impact of supply disruptions, and potential hedging strategies for businesses dealing with critical resources.\n",
        "\n",
        "## Simulation Overview\n",
        "\n",
        "Restate the purpose and what this notebook demonstrates.  Include a detailed explanation of each parameter used in the simulation with practical examples.\n",
        "\n",
        "\n",
        "### Baseline Simulation\n",
        "\n",
        "In this section we want to understand and visualise the fluctuations without the supply disruption day event.\n",
        "\n",
        "First we need to install necessary packages.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "YVXcaPQVoGvX"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yLciWoraSagH"
      },
      "outputs": [],
      "source": [
        "!pip install git+https://github.com/teaching-repositories/simulacra.git -q"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We need to\n",
        "  - **Import the necessary libraries**: Code cells to import libraries (like `matplotlib` for plotting and any other libraries needed).\n",
        "  - **Run the Simulation**: Code to run the simulation with zero disruption impact.\n",
        "  - **Visualise the Results**: Plotting prices over time to establish a baseline."
      ],
      "metadata": {
        "id": "BbWt8I6XqQpV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from simulacra import ResourceFluctuationsSimulation\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Helper function to display the plot\n",
        "def plot_prices(prices, supply_disruption_day=None):\n",
        "    \"\"\"\n",
        "    Plots the prices from a simulation with an optional vertical line marking a supply disruption.\n",
        "\n",
        "    Parameters:\n",
        "        prices (List[float]): A list of prices to be plotted.\n",
        "        supply_disruption_day (Optional[int]): The day on which the supply disruption occurs (defaults to None).\n",
        "\n",
        "    Returns:\n",
        "        None\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(prices, label='Resource Price')\n",
        "    if supply_disruption_day is not None:\n",
        "        plt.axvline(x=supply_disruption_day, color='r', linestyle='--', label='Supply Disruption')\n",
        "    plt.xlabel('Days')\n",
        "    plt.ylabel('Price')\n",
        "    plt.title('Resource Price Simulation')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "# Setup the simulation\n",
        "sim = ResourceFluctuationsSimulation(start_price=100, days=250, volatility=0.015,\n",
        "                             drift=0.0003, supply_disruption_day=100, disruption_severity=0.3)\n",
        "\n",
        "# Run the simulation\n",
        "prices = sim.run_simulation()\n",
        "\n",
        "# Visualise the results\n",
        "plot_prices(prices, sim.supply_disruption_day)"
      ],
      "metadata": {
        "id": "q33eoWmcsANx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from simulacra import ResourceFluctuationsSimulation\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Helper function to display the plot\n",
        "def plot_prices(prices, supply_disruption_day=None):\n",
        "    \"\"\"\n",
        "    Plots the prices from a simulation with an optional vertical line marking a supply disruption.\n",
        "\n",
        "    Parameters:\n",
        "        prices (List[float]): A list of prices to be plotted.\n",
        "        supply_disruption_day (Optional[int]): The day on which the supply disruption occurs (defaults to None).\n",
        "\n",
        "    Returns:\n",
        "        None\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(prices, label='Resource Price')\n",
        "    if supply_disruption_day is not None:\n",
        "        plt.axvline(x=supply_disruption_day, color='r', linestyle='--', label='Supply Disruption')\n",
        "    plt.xlabel('Days')\n",
        "    plt.ylabel('Price')\n",
        "    plt.title('Resource Price Simulation')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "# Setup the simulation\n",
        "sim = ResourceFluctuationsSimulation(start_price=100, days=250, volatility=0.015,\n",
        "                             drift=0.0003, supply_disruption_day=100, disruption_severity=0.3)\n",
        "\n",
        "# Run the simulation\n",
        "prices = sim.run_simulation()\n",
        "\n",
        "# Visualise the results\n",
        "plot_prices(prices, sim.supply_disruption_day)"
      ],
      "metadata": {
        "id": "xk-CtCQmTJN7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Impact of Volatility on Price Stability\n",
        "Analyze how different volatility settings affect the stability and predictability of resource prices. Discuss the observed trends and implications.\n"
      ],
      "metadata": {
        "id": "fHy0kE7wr8qk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Analyzing the Impact of a Supply Disruption\n",
        "In this section, model the effects of a supply disruption on resource pricing and market stability. Include code to set up different scenarios with varying supply disruption. Use markers or lines to denote disruption start and assess impact. Overlay plots or perform a Side-by-side comparison to show different impacts of supply disruption.  Discuss the observed trends and implicaitons."
      ],
      "metadata": {
        "id": "NbTNoTDpsQv1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def simulate_with_disruptions(start_price, days, volatility, drift, disruptions):\n",
        "    \"\"\"\n",
        "    Simulates resource prices with varying supply disruptions.\n",
        "\n",
        "    Parameters:\n",
        "        start_price (float): Initial price of the resource.\n",
        "        days (int): Total number of days for the simulation.\n",
        "        volatility (float): Daily price fluctuation severity.\n",
        "        drift (float): General price trend (upward or downward).\n",
        "        disruptions (list of tuple): List of tuples where each tuple contains\n",
        "                                     (disruption_day, disruption_severity).\n",
        "\n",
        "    Returns:\n",
        "        dict: Dictionary of price arrays keyed by disruption scenario descriptions.\n",
        "    \"\"\"\n",
        "    results = {}\n",
        "    for disruption_day, disruption_severity in disruptions:\n",
        "        sim = ResourceFluctuationsSimulation(start_price=start_price, days=days,\n",
        "                                             volatility=volatility, drift=drift,\n",
        "                                             supply_disruption_day=disruption_day,\n",
        "                                             disruption_severity=disruption_severity)\n",
        "        prices = sim.run_simulation()\n",
        "        scenario_description = f\"Day {disruption_day}, Severity {disruption_severity}\"\n",
        "        results[scenario_description] = prices\n",
        "    return results\n",
        "\n",
        "def plot_disruption_impacts(results):\n",
        "    \"\"\"\n",
        "    Plots multiple simulation results with markers for disruptions.\n",
        "\n",
        "    Parameters:\n",
        "        results (dict): Dictionary of price arrays keyed by disruption scenario descriptions.\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(14, 8))\n",
        "    for scenario, prices in results.items():\n",
        "        disruption_day = int(scenario.split(',')[0].split(' ')[1])\n",
        "        plt.plot(prices, label=f'Scenario: {scenario}')\n",
        "        plt.axvline(x=disruption_day, color='red', linestyle='--', label=f'Disruption on Day {disruption_day}')\n",
        "    plt.title('Impact of Various Supply Disruptions on Resource Prices')\n",
        "    plt.xlabel('Days')\n",
        "    plt.ylabel('Price')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "# Parameters for the simulation\n",
        "start_price = 100\n",
        "days = 365\n",
        "volatility = 0.015\n",
        "drift = 0.0002\n",
        "\n",
        "# Different disruption scenarios\n",
        "disruptions = [\n",
        "    (100, 0.1),  # Disruption on day 100 with severity 0.1\n",
        "    (150, 0.2),  # Disruption on day 150 with severity 0.2\n",
        "    (200, -0.1)  # Disruption on day 200 with severity -0.1 (price drop)\n",
        "]\n",
        "\n",
        "# Run simulations with disruptions\n",
        "results = simulate_with_disruptions(start_price, days, volatility, drift, disruptions)\n",
        "\n",
        "# Plot and compare the results\n",
        "plot_disruption_impacts(results)"
      ],
      "metadata": {
        "id": "l77hSsTwsUS4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exploring Hedging Strategies (Optional)\n",
        "In this section, evaluate the effectiveness of different hedging strategies to mitigate risks associated with price fluctuations.  Set up various hypothetical scenarios with assumed prices and effects. Use graphs to show strategy effectiveness versus cost."
      ],
      "metadata": {
        "id": "Me8lcmt6sjsx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def simulate_prices(days, start_price, volatility, drift):\n",
        "    \"\"\"\n",
        "    Generates a price path for a commodity based on volatility and drift.\n",
        "\n",
        "    Parameters:\n",
        "        days (int): Number of days to simulate.\n",
        "        start_price (float): Starting price of the commodity.\n",
        "        volatility (float): Daily volatility percentage.\n",
        "        drift (float): Daily price drift percentage.\n",
        "\n",
        "    Returns:\n",
        "        np.array: Simulated price path.\n",
        "    \"\"\"\n",
        "    prices = np.zeros(days)\n",
        "    prices[0] = start_price\n",
        "    for i in range(1, days):\n",
        "        random_change = np.random.normal(drift, volatility)\n",
        "        prices[i] = prices[i - 1] * (1 + random_change)\n",
        "    return prices\n",
        "\n",
        "def apply_hedging_strategy(prices, strategy):\n",
        "    \"\"\"\n",
        "    Applies a hedging strategy to the price path and calculates the cost and effectiveness.\n",
        "\n",
        "    Parameters:\n",
        "        prices (np.array): Simulated price path.\n",
        "        strategy (dict): Dictionary containing strategy details like type and parameters.\n",
        "\n",
        "    Returns:\n",
        "        dict: Dictionary with final price, total cost and effectiveness of the strategy.\n",
        "    \"\"\"\n",
        "    hedge_cost = 0\n",
        "    effectiveness = 0\n",
        "    if strategy['type'] == 'futures':\n",
        "        hedge_cost = strategy['cost']\n",
        "        effectiveness = np.std(prices) / np.std(prices * (1 - strategy['coverage']))\n",
        "    elif strategy['type'] == 'options':\n",
        "        options_cost_per_day = strategy['cost'] * len(prices)\n",
        "        hedge_cost = options_cost_per_day * strategy['coverage']\n",
        "        effectiveness = np.std(prices) - np.std(prices * (1 - strategy['coverage']))\n",
        "\n",
        "    return {'final_price': prices[-1], 'total_cost': hedge_cost, 'effectiveness': effectiveness}\n",
        "\n",
        "# Simulation parameters\n",
        "days = 365\n",
        "start_price = 100\n",
        "volatility = 0.03\n",
        "drift = 0.0001\n",
        "\n",
        "# Simulate base price path without hedging\n",
        "base_prices = simulate_prices(days, start_price, volatility, drift)\n",
        "\n",
        "# Define hedging strategies\n",
        "strategies = {\n",
        "    'futures': {'type': 'futures', 'coverage': 0.5, 'cost': 0.01},\n",
        "    'options': {'type': 'options', 'coverage': 0.5, 'cost': 0.02}\n",
        "}\n",
        "\n",
        "# Evaluate strategies\n",
        "results = {}\n",
        "for name, strategy in strategies.items():\n",
        "    results[name] = apply_hedging_strategy(base_prices, strategy)\n",
        "\n",
        "# Plotting\n",
        "plt.figure(figsize=(14, 8))\n",
        "plt.plot(base_prices, label='No Hedging')\n",
        "for name, result in results.items():\n",
        "    plt.plot([0, days-1], [start_price, result['final_price']], label=f'{name} Strategy - Cost: ${result[\"total_cost\"]:.2f}, Effectiveness: {result[\"effectiveness\"]:.2f}')\n",
        "plt.title('Effectiveness of Hedging Strategies Against Price Fluctuations')\n",
        "plt.xlabel('Days')\n",
        "plt.ylabel('Price')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "SnVHo5owsmXL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Conclusions\n",
        "Summarise the insights gained from the simulations, implications for businesses, and potential strategies for managing pricing risks in volatile markets.\n",
        "\n",
        "### Challenges and Further Research\n",
        "Discuss any limitations encountered during the simulations and suggest areas for further exploration or improvement in future studies.\n",
        "\n",
        "### References and Additional Resources\n",
        "Any sources used for data or concepts."
      ],
      "metadata": {
        "id": "74HeX4kbqGh6"
      }
    }
  ]
}